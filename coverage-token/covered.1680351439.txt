/Users/rati/Projects/research/advanced_solidity/smart-contract-fuzzing-echidna/src/Token.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity =0.7.6;
  3 |     | contract Token {
  4 |     | 
  5 |     |   mapping(address => uint) balances;
  6 | *   |   uint public totalSupply;
  7 |     | 
  8 |     |   constructor(uint _initialSupply) {
  9 |     |     balances[msg.sender] = totalSupply = _initialSupply;
 10 |     |   }
 11 |     | 
 12 | *e  |   function transfer(address _to, uint _value) public returns (bool) {
 13 | *e  |     require(balances[msg.sender] - _value >= 0);
 14 | *e  |     balances[msg.sender] -= _value;
 15 | *e  |     balances[_to] += _value;
 16 | *e  |     return true;
 17 |     |   }
 18 |     | 
 19 | *e  |   function balanceOf(address _owner) public view returns (uint balance) {
 20 | *e  |     return balances[_owner];
 21 |     |   }
 22 |     | }

/Users/rati/Projects/research/advanced_solidity/smart-contract-fuzzing-echidna/src/echidna/FuzzToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity =0.7.6;
  3 |     | 
  4 |     | import {Token} from "../Token.sol";
  5 | *er | 
  6 |     | contract EchidnaFuzzToken is Token {
  7 |     | 
  8 |     |     address echidna_caller = msg.sender;
  9 |     | 
 10 |     |     constructor() Token(20)  {
 11 |     |     }
 12 |     | 
 13 |     |     function echidna_test_balance() public view returns (bool) {
 14 |     |         return balanceOf(echidna_caller)>20;
 15 |     |     }
 16 |     | 
 17 | *er |     function  test_transfer(uint256 amountToTransfer) public {
 18 | *er |         require( amountToTransfer > 0);
 19 |     | 
 20 | *e  |         transfer(echidna_caller, amountToTransfer);
 21 | *e  |         assert(balanceOf(echidna_caller)>20);
 22 |     |     }
 23 |     | 
 24 |     | 
 25 |     | }
 26 |     | 

